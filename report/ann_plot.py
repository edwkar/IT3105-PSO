from pylab import *

IRIS_RES = (
  (100, [(4, 5), (28, 23), (12, 4), (26, 24), (16, 9), (25, 25), (30, 25), (33, 17), (17, 11), (21, 14), (30, 19), (19, 9), (22, 19), (29, 22), (29, 16), (35, 21), (34, 27), (16, 8), (16, 15), (25, 22), (29, 22), (27, 18), (32, 18), (27, 23), (27, 23)]),
  (200, [(20, 17), (33, 17), (25, 16), (22, 17), (25, 19), (4, 5), (28, 22), (14, 3), (27, 12), (15, 16), (22, 15), (12, 11), (7, 3), (27, 25), (22, 28), (25, 12), (16, 10), (16, 18), (18, 14), (23, 10), (6, 0), (15, 8), (25, 25), (29, 24), (30, 18)]),
  (300, [(12, 11), (6, 5), (7, 1), (2, 4), (7, 14), (27, 24), (10, 12), (4, 2), (18, 14), (31, 20), (13, 21), (27, 18), (28, 22), (19, 10), (28, 24), (19, 11), (21, 17), (18, 14), (27, 13), (31, 19), (10, 12), (13, 7), (6, 5), (6, 4), (6, 3)]),
  (500, [(9, 3), (12, 16), (16, 15), (8, 8), (7, 4), (14, 6), (16, 10), (18, 24), (15, 11), (10, 11), (13, 11), (3, 6), (2, 7), (19, 7), (13, 12), (21, 7), (16, 5), (11, 7), (15, 16), (24, 26), (11, 3), (21, 15), (22, 27), (16, 13), (8, 8)]),
  (1000, [(13, 10), (5, 0), (2, 4), (3, 2), (3, 4), (3, 5), (1, 6), (8, 6), (11, 11), (3, 4), (15, 14), (5, 3), (13, 5), (8, 5), (7, 2), (6, 3), (11, 8), (4, 3), (4, 2), (4, 3), (6, 9), (10, 5), (10, 6), (4, 3), (3, 7)]),
  (2000, [(3, 7), (2, 3), (4, 3), (3, 3), (5, 8), (5, 5), (5, 0), (1, 4), (2, 1), (3, 4), (0, 4), (1, 2), (2, 0), (3, 1), (1, 4), (0, 3), (2, 3), (2, 6), (4, 6), (5, 3), (3, 3), (2, 2), (6, 4), (3, 1), (3, 2)]),
  (3000, [(2, 1), (1, 4), (2, 3), (0, 3), (2, 1), (1, 2), (2, 4), (1, 4), (1, 3), (3, 3), (2, 5), (2, 4), (1, 3), (3, 3), (2, 2), (2, 5), (6, 5), (2, 4), (1, 7), (4, 6), (0, 6), (1, 5), (3, 1), (2, 4), (2, 7)]),
  (5000, [(4, 4), (0, 4), (2, 2), (0, 6), (2, 7), (1, 4), (2, 2), (1, 4), (0, 2), (2, 4), (0, 5), (2, 3), (1, 2), (1, 3), (1, 3), (1, 4), (1, 6), (4, 2), (1, 3), (2, 4), (0, 3), (0, 5), (1, 5), (1, 5), (2, 3)]),
  (7000, [(0, 4), (3, 1), (2, 3), (1, 5), (2, 3), (3, 2), (0, 3), (0, 3), (2, 1), (2, 3), (1, 4), (1, 4), (1, 4), (1, 4), (2, 4), (1, 2), (1, 3), (3, 1), (1, 2), (2, 0), (0, 5), (2, 1), (1, 3), (0, 4), (1, 3)]),
  (10000, [(2, 3), (3, 9), (1, 2), (2, 2), (1, 3), (1, 3), (2, 3), (1, 4), (1, 1), (0, 3), (1, 3), (2, 1), (1, 4), (1, 1), (1, 3), (1, 7), (2, 3), (0, 7), (1, 4), (0, 2), (2, 1), (1, 1), (2, 2), (1, 5), (1, 3)]),
  (12500, [(1, 5), (1, 3), (0, 4), (2, 6), (2, 2), (1, 4), (1, 3), (2, 4), (1, 3), (2, 2), (1, 3), (2, 1), (2, 2), (1, 3), (2, 1), (0, 4), (0, 2), (0, 2), (2, 7), (1, 2), (1, 2), (0, 7), (1, 5), (0, 2), (1, 3)]),
  (15000, [(0, 4), (2, 4), (0, 2), (0, 2), (2, 3), (0, 1), (0, 2), (1, 2), (1, 1), (1, 2), (1, 2), (0, 4), (1, 1), (1, 3), (0, 3), (1, 3), (1, 3), (1, 4), (2, 2), (2, 1), (0, 3), (1, 3), (1, 3), (1, 2), (0, 4)]),
  (17500, [(1, 2), (1, 2), (0, 2), (1, 3), (0, 2), (1, 4), (1, 4), (2, 6), (1, 6), (2, 1), (2, 2), (1, 2), (0, 5), (1, 4), (1, 1), (1, 1), (2, 2), (1, 3), (1, 3), (1, 3), (2, 4), (0, 5), (1, 2), (0, 4), (2, 2)]),
  (20000, [(0, 6), (2, 0), (1, 3), (2, 1), (0, 2), (3, 2), (1, 3), (0, 1), (2, 1), (1, 4), (1, 2), (1, 6), (1, 2), (1, 1), (1, 1), (0, 4), (0, 2), (1, 4), (3, 1), (1, 3), (0, 3), (0, 3), (0, 3), (0, 3), (1, 1)]),
  (22500, [(0, 5), (0, 3), (0, 3), (0, 2), (0, 3), (1, 3), (2, 5), (1, 4), (0, 5), (0, 3), (1, 3), (2, 1), (0, 3), (0, 4), (0, 2), (1, 2), (2, 2), (0, 2), (1, 3), (1, 4), (0, 2), (0, 5), (1, 2), (0, 2), (2, 1)]),
  (25000, [(1, 2), (1, 4), (1, 1), (1, 2), (1, 4), (0, 3), (0, 3), (1, 3), (0, 3), (0, 3), (1, 1), (1, 1), (1, 2), (0, 3), (1, 5), (0, 4), (0, 6), (1, 3), (1, 5), (0, 3), (1, 2), (1, 2), (0, 4), (2, 3), (2, 1)]),
)

SEEDS_RES = (
  (100, [(45, 25), (43, 30), (39, 35), (46, 26), (43, 35), (38, 24), (34, 34), (42, 29), (49, 29), (52, 33), (64, 48), (53, 42), (65, 50), (44, 26), (42, 31), (46, 24), (45, 28), (44, 33), (46, 32), (41, 41), (49, 29), (37, 37), (53, 35), (40, 36), (54, 35)]),
  (200, [(48, 23), (34, 38), (35, 28), (43, 39), (44, 33), (41, 40), (41, 29), (45, 26), (50, 28), (41, 33), (35, 33), (18, 14), (38, 33), (37, 34), (41, 32), (26, 17), (46, 36), (34, 38), (42, 31), (41, 38), (39, 32), (45, 35), (38, 34), (46, 31), (42, 28)]),
  (300, [(43, 22), (41, 29), (39, 29), (37, 37), (45, 27), (43, 31), (40, 30), (36, 27), (43, 29), (30, 19), (45, 27), (41, 29), (43, 30), (44, 26), (42, 28), (40, 32), (35, 22), (44, 40), (43, 31), (39, 33), (22, 13), (41, 29), (35, 35), (50, 21), (32, 26)]),
  (500, [(43, 28), (41, 29), (16, 10), (10, 12), (39, 31), (45, 22), (24, 17), (34, 25), (24, 21), (29, 11), (44, 28), (38, 34), (40, 21), (27, 17), (29, 11), (41, 29), (41, 29), (43, 27), (43, 27), (39, 26), (40, 39), (21, 11), (43, 27), (44, 38), (41, 31)]),
  (1000, [(35, 33), (12, 15), (20, 17), (25, 18), (33, 20), (29, 14), (25, 11), (34, 29), (19, 15), (28, 15), (37, 32), (29, 18), (13, 12), (28, 19), (14, 5), (36, 25), (21, 21), (27, 20), (39, 31), (33, 19), (31, 11), (18, 20), (37, 36), (14, 7), (41, 30)]),
  (2000, [(16, 13), (16, 9), (17, 11), (41, 29), (16, 7), (9, 8), (29, 20), (22, 14), (31, 27), (8, 14), (15, 11), (12, 6), (19, 11), (11, 7), (24, 15), (37, 33), (16, 15), (19, 11), (16, 14), (19, 14), (12, 10), (36, 29), (9, 7), (34, 28), (15, 15)]),
  (3000, [(12, 10), (23, 17), (9, 7), (9, 12), (21, 11), (23, 23), (14, 9), (9, 9), (18, 12), (11, 10), (9, 11), (15, 9), (24, 21), (13, 17), (14, 16), (12, 7), (7, 11), (11, 8), (9, 5), (11, 14), (10, 3), (9, 9), (13, 14), (15, 14), (8, 10)]),
  (5000, [(3, 6), (9, 8), (10, 8), (7, 14), (6, 11), (11, 7), (9, 10), (15, 11), (10, 6), (19, 15), (12, 15), (28, 20), (20, 17), (6, 9), (8, 8), (7, 6), (12, 7), (13, 7), (3, 8), (10, 9), (10, 9), (10, 13), (14, 11), (9, 11), (6, 7)]),
  (7500, [(7, 11), (6, 8), (7, 10), (8, 12), (4, 7), (4, 10), (7, 10), (7, 8), (6, 8), (8, 6), (4, 11), (14, 20), (9, 11), (9, 13), (8, 6), (7, 12), (14, 11), (10, 13), (6, 7), (7, 4), (8, 12), (8, 7), (9, 10), (7, 5), (5, 9)]),
  (10000, [(7, 6), (6, 8), (7, 5), (7, 6), (6, 11), (5, 7), (9, 15), (6, 7), (8, 6), (9, 9), (5, 8), (3, 9), (6, 8), (8, 4), (9, 6), (5, 7), (7, 6), (6, 6), (5, 8), (11, 12), (10, 6), (12, 11), (6, 6), (8, 7), (7, 9)]),
  (12500, [(7, 13), (3, 7), (5, 12), (6, 14), (5, 8), (6, 11), (8, 5), (6, 18), (4, 6), (2, 5), (10, 9), (8, 9), (4, 6), (3, 6), (7, 8), (10, 12), (9, 9), (7, 5), (10, 8), (5, 4), (6, 8), (4, 10), (7, 9), (7, 9), (7, 8)]),
  (15000, [(7, 10), (6, 3), (4, 7), (6, 7), (7, 4), (6, 8), (4, 6), (6, 6), (6, 6), (7, 12), (7, 7), (12, 13), (6, 8), (6, 8), (5, 8), (7, 6), (6, 11), (9, 1), (11, 13), (11, 3), (6, 11), (5, 7), (8, 7), (4, 7), (5, 7)]),
  (17500, [(5, 7), (8, 5), (5, 11), (5, 9), (6, 7), (7, 6), (8, 3), (9, 8), (5, 12), (9, 7), (6, 14), (6, 9), (6, 3), (7, 5), (4, 7), (5, 8), (6, 13), (5, 8), (11, 10), (6, 7), (9, 6), (6, 7), (4, 9), (7, 6), (4, 5)]),
  (20000, [(8, 6), (6, 5), (5, 8), (6, 6), (8, 5), (6, 15), (5, 6), (8, 10), (6, 7), (6, 12), (7, 9), (5, 10), (4, 8), (5, 10), (5, 8), (3, 11), (8, 13), (7, 6), (2, 7), (6, 3), (4, 5), (3, 16), (5, 10), (9, 15), (5, 16)]),
  (22500, [(6, 10), (5, 7), (3, 8), (7, 5), (5, 6), (8, 9), (7, 3), (3, 14), (5, 6), (6, 8), (4, 5), (6, 10), (4, 10), (12, 7), (8, 7), (6, 10), (7, 6), (5, 8), (4, 11), (6, 12), (11, 11), (5, 6), (4, 8), (5, 9), (8, 8)]),
  (25000, [(8, 6), (7, 2), (3, 8), (3, 11), (5, 6), (3, 12), (6, 12), (2, 7), (10, 9), (10, 5), (3, 9), (7, 8), (6, 2), (3, 9), (6, 9), (5, 5), (6, 9), (6, 9), (6, 8), (8, 11), (5, 6), (6, 6), (4, 4), (8, 8), (5, 13)]),
  (27500, [(2, 9), (8, 5), (4, 9), (6, 5), (3, 9), (6, 9), (3, 11), (8, 9), (5, 8), (5, 11), (7, 13), (1, 11), (9, 4), (5, 7), (7, 10), (4, 8), (3, 10), (6, 8), (4, 5), (5, 8), (1, 13), (7, 9), (5, 14), (6, 9), (8, 12)]),
  (30000, [(7, 6), (6, 9), (8, 4), (4, 6), (3, 5), (4, 9), (5, 9), (6, 8), (5, 8), (7, 6), (3, 7), (6, 9), (2, 8), (5, 8), (5, 9), (24, 15), (6, 7), (4, 4), (7, 8), (5, 9), (4, 8), (5, 4), (7, 9), (6, 9), (6, 9)]),
)


GLASS_RES = (
  (100, [(85, 54), (70, 46), (83, 55), (73, 48), (87, 51), (73, 47), (81, 57), (75, 63), (82, 55), (88, 56)]),
  (200, [(86, 52), (82, 63), (72, 61), (77, 52), (81, 57), (80, 58), (81, 62), (79, 58), (77, 52), (88, 55)]),
  (300, [(76, 44), (71, 58), (73, 47), (78, 52), (73, 51), (76, 51), (71, 54), (68, 42), (71, 53), (66, 50)]),
  (500, [(68, 55), (69, 52), (75, 53), (58, 58), (62, 50), (66, 51), (73, 48), (64, 49), (73, 53), (70, 55)]),
  (1000, [(71, 41), (68, 41), (71, 50), (71, 60), (67, 46), (57, 46), (60, 50), (68, 50), (61, 52), (64, 49)]),
  (2000, [(65, 42), (56, 38), (63, 38), (61, 52), (54, 35), (65, 41), (61, 50), (56, 54), (49, 42), (47, 42)]),
  (3000, [(57, 35), (57, 45), (50, 36), (60, 46), (53, 35), (50, 40), (57, 41), (52, 51), (51, 42), (62, 46)]),
  (5000, [(50, 36), (53, 29), (49, 39), (52, 39), (44, 36), (49, 40), (53, 56), (47, 33), (53, 31), (42, 37)]),
  (7500, [(50, 37), (51, 42), (57, 40), (56, 48), (50, 33), (37, 39), (55, 52), (46, 41), (48, 36), (46, 28)]),
  (10000, [(47, 34), (53, 49), (42, 41), (40, 44), (56, 39), (45, 39), (41, 35), (45, 37), (45, 40), (49, 40)]),
  (12500, [(40, 35), (36, 46), (41, 38), (48, 27), (47, 31), (41, 41), (40, 41), (46, 32), (43, 43), (44, 38)]),
  (15000, [(42, 36), (40, 43), (36, 41), (39, 38), (54, 29), (48, 33), (43, 33), (40, 37), (45, 38), (58, 51)]),
  (17500, [(43, 40), (41, 38), (42, 31), (43, 39), (58, 52), (38, 39), (42, 32), (38, 37), (58, 48), (49, 34)]),
  (20000, [(52, 38), (58, 49), (48, 36), (44, 34), (48, 34), (48, 38), (47, 28), (45, 36), (41, 34), (46, 37)]),
  (22500, [(40, 41), (42, 41), (38, 38), (38, 33), (39, 42), (40, 34), (42, 40), (50, 29), (39, 34), (41, 43)]),
  (25000, [(39, 34), (45, 37), (43, 28), (49, 36), (46, 40), (43, 33), (46, 36), (49, 42), (37, 44), (38, 29)]),
  (27500, [(40, 40), (49, 41), (56, 53), (35, 35), (49, 29), (45, 33), (36, 41), (50, 38), (43, 34), (41, 34)]),
  (30000, [(42, 40), (44, 42), (44, 34), (33, 46), (36, 37), (46, 30), (44, 42), (40, 37), (45, 36), (46, 29)]),
)

def save_plot(data, num_train, num_test, name):
  fig = figure(figsize=(12, 6))
  xlabel('Number of fitness evaluations')
  ylabel('Network performance')

  def plot_mean():
    X = []
    Ytrain = []
    Ytest = []

    for num_evals, xs in data:
      X.append(num_evals)
      Ytrain.append(sum( (1.0*num_train-x[0])/num_train for x in xs ) / len(xs) )
      Ytest.append (sum( (1.0*num_test-x[1])/num_test for x in xs ) / len(xs) )

    axis([0, max(X)+500, 0.55, 1.03])
    plot(X, Ytrain, c='black', marker='o', linewidth=2, label='Mean acc. on training set')
    plot(X, Ytest, c='gray', marker='o', linewidth=2, label='Mean acc. on testing set')


  def plot_scatter():
    X = []
    Ytrain = []
    Ytest = []
    for num_evals, xs in data:
      for x in xs:
        X.append(num_evals)
        Ytrain.append((num_train-x[0])/float(num_train))
        Ytest.append((num_test-x[0])/float(num_test))
    scatter(X, Ytrain, marker='x', s=3, c='red', label='')

  plot_mean()
  plot_scatter()

  title(name.upper())
  grid(True)
  yticks([d/100.0 for d in range(30, 100+1, 5)])
  xticks([num_evals for num_evals, xs in data if num_evals <= 100 or num_evals >= 3000])
  legend(loc=4, shadow=True, fancybox=True)
  savefig(name+'-ann-performance.png')
  #show()


save_plot(IRIS_RES, 90, 60, 'iris')
save_plot(SEEDS_RES, 126, 84, 'seeds')
save_plot(GLASS_RES, 128, 86, 'glass')
